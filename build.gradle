plugins {
    id 'java'
    id 'org.springframework.boot' version '3.2.2'
    id 'io.spring.dependency-management' version '1.1.4'
    id 'jacoco'
}

group = 'synk'
version = '0.0.1-SNAPSHOT'

java {
    sourceCompatibility = '17'
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
    maven { url 'https://jitpack.io' }
}

dependencies {
    // spring boot
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-validation'

    // lombok
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    // mapper
    implementation 'org.mapstruct:mapstruct:1.5.3.Final'
    annotationProcessor 'org.mapstruct:mapstruct-processor:1.5.3.Final'
    annotationProcessor files('spi/accessornaming-spi-impl-1.0.0.jar')

    // mysql
    runtimeOnly 'com.mysql:mysql-connector-j'

    // h2
    runtimeOnly 'com.h2database:h2'

    // swagger
    implementation("org.springdoc:springdoc-openapi-starter-webmvc-ui:2.2.0")
    //implementation("org.springdoc:springdoc-openapi-ui:1.6.11")

    // webflux
    implementation 'org.springframework.boot:spring-boot-starter-webflux'

    // email
    implementation 'org.springframework.boot:spring-boot-starter-mail'
    implementation 'org.springframework:spring-context'
    implementation 'org.springframework:spring-context-support'
    implementation 'com.sun.mail:jakarta.mail:2.0.1'

    // security
    implementation 'com.auth0:java-jwt:4.2.1'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-data-redis', version: '2.4.10'
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'

    // jwt
    implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.5'

    // Querydsl 추가
    implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
    annotationProcessor "com.querydsl:querydsl-apt:${dependencyManagement.importedProperties['querydsl.version']}:jakarta"
    annotationProcessor "jakarta.annotation:jakarta.annotation-api"
    annotationProcessor "jakarta.persistence:jakarta.persistence-api"

    // Logging
    implementation 'org.springframework.boot:spring-boot-starter-logging'

    //implementation group:'javax.servlet', name:'javax.servlet-api', version:'3.1.0'
    testImplementation 'org.springframework.security:spring-security-test'

    // validate
    implementation 'org.hibernate.validator:hibernate-validator'

    //gson
    implementation group: 'com.google.code.gson', name: 'gson', version: '2.10.1'


    // test
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'

    // mac m1 setting
    implementation 'io.netty:netty-resolver-dns-native-macos:4.1.68.Final:osx-aarch_64'

    // aws
    implementation "software.amazon.awssdk:s3:2.21.0"

    // PATCH 메서드 지원을 위함
    implementation group: 'org.apache.httpcomponents.client5', name: 'httpclient5', version: '5.3.1'

    // 메일 서비스를 위함
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'

    // discord web hook
    implementation('com.github.napstr:logback-discord-appender:1.0.0')
}

tasks.named('test') {
    useJUnitPlatform()
    finalizedBy jacocoTestCoverageVerification
}

clean {
    delete file('src/main/generated')
}

jacoco {
    toolVersion = '0.8.7'
}

jacocoTestReport {
    reports {
        xml.required.set(true)
        csv.required.set(true)
        html.required.set(true)
    }

    afterEvaluate {
        classDirectories.setFrom(
                files(classDirectories.files.collect {
                    fileTree(dir: it, excludes: [
                            '**/*Application*',
                            '**/*Exception*',
                            '**/dto/**',
                            // ...
                    ])
                })
        )
    }
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            // ...

            excludes = [
                    '*.*Application',
                    '*.*Exception',
                    '*.dto.*',
                    // ...
            ]
        }
    }
}

